{"version":3,"file":"static/js/668.246ec2c8.chunk.js","mappings":"kLAKaA,EAAcC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAAaE,MAAM,8BAA8BC,SAAS,YACjEC,SAAUJ,EAAAA,KAELK,IAAI,GAEJF,SAAS,c,GAQYH,EAAAA,KAAaC,MAAM,CAC7CK,SAAUN,EAAAA,KAELK,IAAI,EAAG,+CACPF,SAAS,YACdI,QAASP,EAAAA,KAEJQ,MAAM,CAAC,WAAY,YAAa,UAAW,SAAU,oBACrDL,SAAS,YACdM,YAAaT,EAAAA,KAERQ,MAAM,EAAC,GAAO,wC,wFCdjBE,EAAY,SAACC,GACf,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAc,CACVZ,MAAM,GACNE,SAAS,GACTW,YAAY,GAEhBC,SAAU,SAACC,EAAO,GAAiC,IAA/BC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAC/BD,GAAc,GAEdE,QAAQC,IAAIC,KAAKC,UAAUN,IAC3BN,EAAMa,MAAMP,EAAOf,MAAOe,EAAOb,SAAUa,EAAOF,WAAWG,EAAeC,EAEhF,EACAM,iBAAiB1B,IAElB,OACI,0BACI,kBAAMiB,SAAUJ,EAAOc,aAAa,UAC/Bd,EAAOe,QACF,SAACC,EAAA,EAAK,CAACC,SAAS,QAAO,SAAEjB,EAAOe,SAChC,MAEN,SAACG,EAAA,EAAS,CACNC,GAAI,QACJC,KAAM,QACNC,MAAO,QACPC,OAAQ,SACRC,MAAOvB,EAAOK,OAAOf,MACrBkC,SAAUxB,EAAOyB,aACjBC,OAAQ1B,EAAO2B,WACfC,MAAO5B,EAAO6B,QAAQvC,OAASwC,QAAQ9B,EAAO+B,OAAOzC,OACrD0C,WAAYhC,EAAO6B,QAAQvC,OAASU,EAAO+B,OAAOzC,SAEtD,SAAC4B,EAAA,EAAS,CACNC,GAAI,WACJC,KAAM,WACNC,MAAO,WACPY,KAAK,WACLX,OAAQ,SACRC,MAAOvB,EAAOK,OAAOb,SACrBgC,SAAUxB,EAAOyB,aACjBC,OAAQ1B,EAAO2B,WACfC,MAAO5B,EAAO6B,QAAQrC,UAAYsC,QAAQ9B,EAAO+B,OAAOvC,UACxDwC,WAAYhC,EAAO6B,QAAQrC,UAAYQ,EAAO+B,OAAOvC,YAIzD,SAAC0C,EAAA,EAAgB,CACbC,SAAS,SAACC,EAAA,EAAQ,CACLjB,GAAI,aACJC,KAAM,eACNC,MAAM,cACNgB,QAASrC,EAAOK,OAAOF,WACvBqB,SAAUxB,EAAOyB,gBAIlC,SAACa,EAAA,EAAM,CAACL,KAAM,SAAUM,QAAS,WAAYC,SAAUxC,EAAOyC,aAAa,SAAC,eAI/F,EAoBA,GAAeC,EAAAA,EAAAA,KALS,SAACC,GAAK,MAAO,CACjCC,OAAOD,EAAME,KAAKD,OACrB,GAGuC,CAAChC,MAAAA,EAAAA,IAAzC,EAlBkB,SAACb,GAEf,OAAGA,EAAM6C,QACE,SAAC,KAAQ,CAACE,GAAG,cAIpB,4BACI,wBAAI,WACJ,SAAChD,EAAS,CAACc,MAAQb,EAAMa,UAErC,G","sources":["schemas/schemas.js","components/Login/LoginPage.jsx"],"sourcesContent":["import * as yup from \"yup\";\r\n\r\nconst passwordRules = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/;\r\n// min 5 characters, 1 upper case letter, 1 lower case letter, 1 numeric digit.\r\n\r\nexport const loginSchema = yup.object().shape({\r\n    email: yup.string().email(\"Please enter a valid email\").required(\"Required\"),\r\n    password: yup\r\n        .string()\r\n        .min(3)\r\n        // .matches(passwordRules, {message:\"Please create a stronger password\"})\r\n        .required(\"Required\"),\r\n    // confirmPassword: yup\r\n    //     .string()\r\n    //     .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\r\n    //     .required(\"Required\"),\r\n\r\n})\r\n\r\nexport const advancedSchema = yup.object().shape({\r\n    username: yup\r\n        .string()\r\n        .min(3, \"Username must be at least 3 characters long\")\r\n        .required(\"Required\"),\r\n    jobType: yup\r\n        .string()\r\n        .oneOf([\"designer\", \"developer\", \"manager\", \"other\"], \"Invalid Job Type\")\r\n        .required(\"Required\"),\r\n    acceptedTos: yup\r\n        .boolean()\r\n        .oneOf([true], \"Please accept the terms of service\"),\r\n});\r\n\r\n","import React from \"react\";\r\nimport {Field, Form, Formik, useFormik} from \"formik\";\r\nimport {advancedSchema, loginSchema} from \"../../schemas/schemas\";\r\nimport {Alert, Checkbox, FormControlLabel, TextField} from \"@mui/material\";\r\nimport {Button} from \"@mui/material\";\r\nimport \"./LoginPage.css\"\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n// const onSubmit = async (values, actions) => {\r\n//     console.log(\"submitted\");\r\n//     await new Promise((resolve) => setTimeout(resolve, 1000));\r\n//     actions.resetForm();\r\n// }\r\n\r\nconst LoginForm = (props) => {\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            email:\"\",\r\n            password:\"\",\r\n            rememberMe: true,\r\n        },\r\n        onSubmit: (values, {setSubmitting, setStatus}) => {\r\n            setSubmitting(true);\r\n\r\n            console.log(JSON.stringify(values))\r\n            props.login(values.email, values.password, values.rememberMe,setSubmitting, setStatus);\r\n\r\n        },\r\n        validationSchema:loginSchema,\r\n    })\r\n       return(\r\n           <div>\r\n               <form onSubmit={formik.handleSubmit}>\r\n                   {formik.status\r\n                       ? <Alert severity=\"error\">{formik.status}</Alert>\r\n                       : null}\r\n\r\n                   <TextField\r\n                       id={\"email\"}\r\n                       name={\"email\"}\r\n                       label={\"email\"}\r\n                       margin={\"normal\"}\r\n                       value={formik.values.email}\r\n                       onChange={formik.handleChange}\r\n                       onBlur={formik.handleBlur}\r\n                       error={formik.touched.email && Boolean(formik.errors.email)}\r\n                       helperText={formik.touched.email && formik.errors.email}\r\n                   />\r\n                   <TextField\r\n                       id={\"password\"}\r\n                       name={\"password\"}\r\n                       label={\"password\"}\r\n                       type=\"password\"\r\n                       margin={\"normal\"}\r\n                       value={formik.values.password}\r\n                       onChange={formik.handleChange}\r\n                       onBlur={formik.handleBlur}\r\n                       error={formik.touched.password && Boolean(formik.errors.password)}\r\n                       helperText={formik.touched.password && formik.errors.password}\r\n\r\n                   />\r\n\r\n                   <FormControlLabel\r\n                       control={<Checkbox\r\n                                    id={\"rememberMe\"}\r\n                                    name={\"rememberMe\"}/>}\r\n                                    label=\"Remember me\"\r\n                                    checked={formik.values.rememberMe}\r\n                                    onChange={formik.handleChange}\r\n\r\n                   />\r\n\r\n                   <Button type={\"submit\"} variant={\"outlined\"} disabled={formik.isSubmitting}>Submit</Button>\r\n               </form>\r\n           </div>\r\n       )\r\n}\r\n\r\nconst LoginPage = (props) => {\r\n\r\n    if(props.isAuth){\r\n        return <Navigate to=\"/profile\"/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm login ={props.login}/>\r\n        </div>)\r\n}\r\n\r\nconst mapStateToProps = (state) => ( {\r\n    isAuth:state.auth.isAuth,\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(LoginPage);"],"names":["loginSchema","yup","shape","email","required","password","min","username","jobType","oneOf","acceptedTos","LoginForm","props","formik","useFormik","initialValues","rememberMe","onSubmit","values","setSubmitting","setStatus","console","log","JSON","stringify","login","validationSchema","handleSubmit","status","Alert","severity","TextField","id","name","label","margin","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","FormControlLabel","control","Checkbox","checked","Button","variant","disabled","isSubmitting","connect","state","isAuth","auth","to"],"sourceRoot":""}